generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model user_profiles {
  id               Int       @id @default(autoincrement())
  user_id          Int       @unique(map: "idx_user_profiles_user_id")
  name             String?   @db.VarChar(100)
  bio              String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  country          String?   @db.VarChar(100)
  state_province   String?   @db.VarChar(100)
  city             String?   @db.VarChar(100)
  isnamepublic     Boolean?  @default(false)
  isbiopublic      Boolean?  @default(false)
  islocationpublic Boolean?  @default(false)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_user_profiles_created_at")
  @@index([country], map: "idx_user_profiles_country")
  @@index([state_province], map: "idx_user_profiles_state_province")
}

model users {
  id                                                          Int                   @id @default(autoincrement())
  username                                                    String                @unique @db.VarChar(50)
  created_at                                                  DateTime?             @default(now()) @db.Timestamp(6)
  password_hash                                               String
  last_password_change                                        DateTime?             @default(now()) @db.Timestamp(6)
  email                                                       String?               @unique(map: "users_email_unique") @db.VarChar(255)
  friendship_requests_friendship_requests_recipient_idTousers friendship_requests[] @relation("friendship_requests_recipient_idTousers")
  friendship_requests_friendship_requests_requester_idTousers friendship_requests[] @relation("friendship_requests_requester_idTousers")
  user_profiles                                               user_profiles?

  @@index([last_password_change], map: "idx_users_last_password_change")
}

model friendship_requests {
  id                                            Int       @id @default(autoincrement())
  requester_id                                  Int
  recipient_id                                  Int
  status                                        String    @default("pending") @db.VarChar(20)
  created_at                                    DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime? @default(now()) @db.Timestamp(6)
  users_friendship_requests_recipient_idTousers users     @relation("friendship_requests_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_friendship_requests_requester_idTousers users     @relation("friendship_requests_requester_idTousers", fields: [requester_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([requester_id, recipient_id], map: "unique_friendship")
  @@index([recipient_id], map: "idx_friendship_requests_recipient_id")
}
