generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model user_profiles {
  id               Int       @id @default(autoincrement())
  user_id          Int       @unique(map: "idx_user_profiles_user_id")
  name             String?   @db.VarChar(100)
  bio              String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  country          String?   @db.VarChar(100)
  state_province   String?   @db.VarChar(100)
  city             String?   @db.VarChar(100)
  isnamepublic     Boolean?  @default(false)
  isbiopublic      Boolean?  @default(false)
  islocationpublic Boolean?  @default(false)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_user_profiles_created_at")
  @@index([country], map: "idx_user_profiles_country")
  @@index([state_province], map: "idx_user_profiles_state_province")
}

model users {
  id                                                          Int                   @id @default(autoincrement())
  username                                                    String                @unique @db.VarChar(50)
  created_at                                                  DateTime?             @default(now()) @db.Timestamp(6)
  password_hash                                               String
  last_password_change                                        DateTime?             @default(now()) @db.Timestamp(6)
  email                                                       String?               @unique(map: "users_email_unique") @db.VarChar(255)
  is_admin                                                    Boolean               @default(false)
  bag_contents                                                bag_contents[]
  bags                                                        bags[]
  courses                                                     courses[]
  disc_master                                                 disc_master[]
  friendship_requests_friendship_requests_recipient_idTousers friendship_requests[] @relation("friendship_requests_recipient_idTousers")
  friendship_requests_friendship_requests_requester_idTousers friendship_requests[] @relation("friendship_requests_requester_idTousers")
  user_profiles                                               user_profiles?

  @@index([last_password_change], map: "idx_users_last_password_change")
}

model friendship_requests {
  id                                            Int       @id @default(autoincrement())
  requester_id                                  Int
  recipient_id                                  Int
  status                                        String    @default("pending") @db.VarChar(20)
  created_at                                    DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime? @default(now()) @db.Timestamp(6)
  users_friendship_requests_recipient_idTousers users     @relation("friendship_requests_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_friendship_requests_requester_idTousers users     @relation("friendship_requests_requester_idTousers", fields: [requester_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([requester_id, recipient_id], map: "unique_friendship")
  @@index([recipient_id], map: "idx_friendship_requests_recipient_id")
}

model disc_master {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brand        String         @db.VarChar(100)
  model        String         @db.VarChar(100)
  speed        Int
  glide        Int
  turn         Int
  fade         Int
  approved     Boolean        @default(false)
  added_by_id  Int?
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  bag_contents bag_contents[]
  users        users?         @relation(fields: [added_by_id], references: [id], onUpdate: NoAction)

  @@index([approved], map: "idx_disc_master_approved")
  @@index([brand, model], map: "idx_disc_master_brand_model")
}

model bags {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            Int
  name               String         @db.VarChar(100)
  description        String?
  is_public          Boolean?       @default(false)
  is_friends_visible Boolean?       @default(false)
  created_at         DateTime?      @default(now()) @db.Timestamp(6)
  updated_at         DateTime?      @default(now()) @db.Timestamp(6)
  bag_contents       bag_contents[]
  users              users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([is_friends_visible], map: "idx_bags_is_friends_visible")
  @@index([is_public], map: "idx_bags_is_public")
  @@index([user_id], map: "idx_bags_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bag_contents {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      Int
  bag_id       String?     @db.Uuid
  disc_id      String      @db.Uuid
  notes        String?     @db.VarChar(255)
  weight       Decimal?    @db.Decimal(4, 1)
  condition    String?     @db.VarChar(20)
  plastic_type String?     @db.VarChar(50)
  color        String?     @db.VarChar(50)
  is_lost      Boolean?    @default(false)
  added_at     DateTime?   @default(now()) @db.Timestamp(6)
  updated_at   DateTime?   @default(now()) @db.Timestamp(6)
  speed        Int?
  glide        Int?
  turn         Int?
  fade         Int?
  brand        String?     @db.VarChar(50)
  model        String?     @db.VarChar(50)
  lost_notes   String?     @db.VarChar(255)
  lost_at      DateTime?   @db.Timestamp(6)
  bags         bags?       @relation(fields: [bag_id], references: [id], onUpdate: NoAction)
  disc_master  disc_master @relation(fields: [disc_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([bag_id], map: "idx_bag_contents_bag_id")
  @@index([disc_id], map: "idx_bag_contents_disc_id")
  @@index([is_lost], map: "idx_bag_contents_is_lost")
  @@index([user_id], map: "idx_bag_contents_user_id")
  @@index([lost_at], map: "idx_bag_contents_lost_at")
}

model courses {
  id                String    @id @db.VarChar(100)
  name              String    @db.VarChar(200)
  city              String    @db.VarChar(100)
  state             String    @db.VarChar(50)
  zip               String?   @db.VarChar(10)
  hole_count        Int
  rating            Decimal?  @db.Decimal(3, 1)
  latitude          Decimal?  @db.Decimal(10, 8)
  longitude         Decimal?  @db.Decimal(11, 8)
  is_user_submitted Boolean?  @default(false)
  approved          Boolean?  @default(true)
  submitted_by_id   Int?
  admin_notes       String?
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  users             users?    @relation(fields: [submitted_by_id], references: [id], onUpdate: NoAction)

  @@index([approved], map: "idx_courses_approved")
  @@index([city], map: "idx_courses_city")
  @@index([is_user_submitted], map: "idx_courses_is_user_submitted")
  @@index([latitude, longitude], map: "idx_courses_location")
  @@index([state], map: "idx_courses_state")
}
