name: Test & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: discbaboons_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: apps/express-server/package-lock.json
          
      - name: Install dependencies
        working-directory: apps/express-server
        run: npm ci
        
      - name: Generate Prisma client
        working-directory: apps/express-server
        run: npm run db:generate
        
      - name: Run database migrations
        working-directory: apps/express-server
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/discbaboons_test
        run: |
          # Install Flyway CLI
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.8.1/flyway-commandline-10.8.1-linux-x64.tar.gz | tar -xvz
          sudo ln -s $(pwd)/flyway-10.8.1/flyway /usr/local/bin
          
          # Run migrations
          flyway -url=jdbc:postgresql://localhost:5432/discbaboons_test -user=testuser -password=testpassword -locations=filesystem:../../migrations migrate
        
      - name: Run tests
        working-directory: apps/express-server
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/discbaboons_test
          NODE_ENV: test
          FORCE_COLOR: true
        run: npm run verify

  deploy:   
    needs: test  
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Important: semantic-release needs full git history
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Setup Node.js for semantic-release
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: apps/express-server/package-lock.json

    - name: 📦 Install semantic-release dependencies
      working-directory: apps/express-server
      run: npm ci

    - name: 🔍 Check if Express app changed
      id: changes
      run: |
        # Check if express app files changed
        if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
          # First commit, assume changes
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "✅ First commit - assuming Express app changes"
        else
          EXPRESS_CHANGES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep "^apps/express-server/" | wc -l)
          
          if [ "$EXPRESS_CHANGES" -eq 0 ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "🚫 No Express app changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Express app changes detected:"
            git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep "^apps/express-server/"
          fi
        fi

    - name: 🏷️ Generate semantic version
      if: steps.changes.outputs.changed == 'true'
      id: semantic
      working-directory: apps/express-server
      run: |
        # Install dependencies if not cached
        npm ci
        
        # Run semantic-release ONLY for version calculation
        npx semantic-release --dry-run || true
        
        # Extract version from the file semantic-release created
        if [ -f "/tmp/next-version.txt" ]; then
          NEXT_VERSION=$(cat /tmp/next-version.txt)
          echo "✅ Semantic-release determined version: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ No version change warranted by semantic-release"
          echo "version_changed=false" >> $GITHUB_OUTPUT
          # Fallback to current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: 🐳 Login to Docker Hub
      if: steps.changes.outputs.changed == 'true' && steps.semantic.outputs.version_changed == 'true'
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: 🏗️ Build Docker image
      if: steps.changes.outputs.changed == 'true' && steps.semantic.outputs.version_changed == 'true'
      working-directory: apps/express-server
      run: |
        VERSION="${{ steps.semantic.outputs.version }}"
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="v${VERSION}-${SHORT_SHA}"
        echo "Building: salokod/discbaboons-express:${IMAGE_TAG}"
        docker build -t salokod/discbaboons-express:${IMAGE_TAG} .
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      id: build
        
    - name: 📤 Push to Docker Hub
      if: steps.changes.outputs.changed == 'true' && steps.semantic.outputs.version_changed == 'true'
      run: |
        IMAGE_TAG="${{ steps.build.outputs.tag }}"
        echo "Pushing: salokod/discbaboons-express:${IMAGE_TAG}"
        docker push salokod/discbaboons-express:${IMAGE_TAG}

    - name: ⚙️ Setup kubectl and doctl
      if: steps.changes.outputs.changed == 'true' && steps.semantic.outputs.version_changed == 'true'
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install doctl
        cd /tmp
        wget https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz
        tar xf doctl-1.104.0-linux-amd64.tar.gz
        sudo mv doctl /usr/local/bin
        
        # Authenticate and configure kubectl
        doctl auth init --access-token ${{ secrets.DO_API_TOKEN }}
        doctl kubernetes cluster kubeconfig save discbaboons-production
        
        # Test connection
        kubectl get nodes

    - name: 🚀 Deploy to Kubernetes
      if: steps.changes.outputs.changed == 'true' && steps.semantic.outputs.version_changed == 'true'
      run: |
        IMAGE_TAG="${{ steps.build.outputs.tag }}"
        NEW_IMAGE="salokod/discbaboons-express:${IMAGE_TAG}"
        
        echo "🚀 Deploying new image: ${NEW_IMAGE}"
        echo "📍 Current production image:"
        kubectl get deployment express-deployment -o jsonpath='{.spec.template.spec.containers[0].image}'
        echo ""
        
        # Update the deployment with new image
        kubectl set image deployment/express-deployment express=${NEW_IMAGE}
        
        # Wait for rollout to complete (5 minute timeout)
        echo "⏳ Waiting for deployment to complete..."
        kubectl rollout status deployment/express-deployment --timeout=300s
        
        # Verify deployment success
        echo "✅ Deployment completed! New pods:"
        kubectl get pods -l app=express -o wide
        
        echo "🎯 Verified new image in deployment:"
        kubectl get deployment express-deployment -o jsonpath='{.spec.template.spec.containers[0].image}'
        echo ""
        
        echo "🌐 Your app is live at: https://discbaboons.spirojohn.com"

    - name: 📝 Create GitHub Release
      if: steps.changes.outputs.changed == 'true' && steps.semantic.outputs.version_changed == 'true'
      working-directory: apps/express-server
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Run semantic-release to create actual release
        npm run semantic-release

    - name: 📢 Deployment Success Notification
      if: success() && steps.changes.outputs.changed == 'true' && steps.semantic.outputs.version_changed == 'true'
      run: |
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "=========================="
        echo "✅ App: https://discbaboons.spirojohn.com"
        echo "🏷️ Image: salokod/discbaboons-express:${{ steps.build.outputs.tag }}"
        echo "📦 Version: ${{ steps.semantic.outputs.version }}"
        echo "⏰ Time: $(date)"
        echo "👤 Deployed by: ${{ github.actor }}"
        echo "📝 Commit: ${{ github.event.head_commit.message }}"
        echo "🔗 Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
    - name: 🚨 Deployment Failure Alert
      if: failure()
      run: |
        echo "❌ DEPLOYMENT FAILED!"
        echo "===================="
        echo "🔍 Check logs immediately: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "📧 Alert team for immediate investigation"
        echo "🔄 Consider emergency rollback if needed"

    - name: ℹ️ No deployment needed
      if: steps.changes.outputs.changed == 'false' || (steps.changes.outputs.changed == 'true' && steps.semantic.outputs.version_changed == 'false')
      run: |
        echo "🚫 No deployment needed"
        if [ "${{ steps.changes.outputs.changed }}" = "false" ]; then
          echo "📝 No Express app changes detected"
          echo "Changed files:"
          git diff --name-only ${{ github.event.before }}..${{ github.sha }} || echo "Unable to detect changes"
        else
          echo "📝 Express app changed but no semantic version bump warranted"
          echo "💡 Commits don't follow conventional commit format or are non-releasable"
        fi
        echo "🏷️ Current version: ${{ steps.semantic.outputs.version }}"
        echo "✅ Skipping build and deployment"