name: Test & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: discbaboons_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: apps/express-server/package-lock.json
          
      - name: Install dependencies
        working-directory: apps/express-server
        run: npm ci
        
      - name: Run database migrations
        working-directory: apps/express-server
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/discbaboons_test
        run: |
          # Install Flyway CLI
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.8.1/flyway-commandline-10.8.1-linux-x64.tar.gz | tar -xvz
          sudo ln -s $(pwd)/flyway-10.8.1/flyway /usr/local/bin
          
          # Run ALL migrations (V2-V6)
          flyway -url=jdbc:postgresql://localhost:5432/discbaboons_test -user=testuser -password=testpassword -locations=filesystem:../../migrations migrate
        
      - name: Generate Prisma client (after migrations)
        working-directory: apps/express-server
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/discbaboons_test
        run: npm run db:generate
        
      - name: Run tests
        working-directory: apps/express-server
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/discbaboons_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          FORCE_COLOR: true
        run: npm run verify

  deploy:   
    needs: test  
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Important: semantic-release needs full git history
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: 📋 Setup Node.js for semantic-release
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: apps/express-server/package-lock.json

    - name: 📦 Install semantic-release dependencies
      working-directory: apps/express-server
      run: npm ci

    - name: ⚙️ Setup kubectl and doctl (early for migration check)
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install doctl
        cd /tmp
        wget https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz
        tar xf doctl-1.104.0-linux-amd64.tar.gz
        sudo mv doctl /usr/local/bin
        
        # Authenticate and configure kubectl
        doctl auth init --access-token ${{ secrets.DO_API_TOKEN }}
        doctl kubernetes cluster kubeconfig save discbaboons-production

        - name: 🔍 Check production migration status & apply if needed
      id: migration_check
      run: |
        echo "🔍 Checking production migration status..."
        
        # Find the latest migration file (highest version number)
        LATEST_MIGRATION=$(ls migrations/V*.sql | sort -V | tail -1)
        LATEST_VERSION=$(basename "$LATEST_MIGRATION" | grep -oE '^V[0-9]+' | sed 's/V//')
        
        echo "📁 Latest migration file: $LATEST_MIGRATION"
        echo "🔢 Latest version number: $LATEST_VERSION"
        
        # Check what's the highest version in production
        PROD_LATEST=$(kubectl exec deployment/postgres-deployment -- psql -U app_user -d discbaboons_db -t -c "SELECT MAX(CAST(version AS INTEGER)) FROM flyway_schema_history;" 2>/dev/null | tr -d ' ' || echo "0")
        
        echo "🏭 Production latest version: $PROD_LATEST"
        
        if [ "$LATEST_VERSION" -gt "$PROD_LATEST" ]; then
          echo "🚨 Migration(s) needed! Local: V$LATEST_VERSION, Production: V$PROD_LATEST"
          echo "migrations_needed=true" >> $GITHUB_OUTPUT
          
          # Show current production migrations
          echo "📊 Current production migrations:"
          kubectl exec deployment/postgres-deployment -- psql -U app_user -d discbaboons_db -c "SELECT version, description, installed_on FROM flyway_schema_history ORDER BY installed_rank;" || echo "Unable to query migration history"
          
          # Show what migrations will be applied
          echo "📋 Migrations to be applied:"
          ls migrations/V*.sql | sort -V | while read migration; do
            VERSION=$(basename "$migration" | grep -oE '^V[0-9]+' | sed 's/V//')
            if [ "$VERSION" -gt "$PROD_LATEST" ]; then
              echo "  → $migration"
            fi
          done
          
          # Install Flyway
          echo "🚀 Installing Flyway..."
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.8.1/flyway-commandline-10.8.1-linux-x64.tar.gz | tar -xvz
          sudo ln -s $(pwd)/flyway-10.8.1/flyway /usr/local/bin
          
          # Get database connection details
          DB_PASSWORD=$(kubectl get secret postgres-secret -o jsonpath='{.data.app-password-new}' | base64 -d)
          
          # Setup port-forward
          echo "🔌 Setting up port-forward to database..."
          kubectl port-forward service/postgres-service 5432:5432 &
          PORTFORWARD_PID=$!
          sleep 5
          
          # Use filesystem directly - NO ConfigMap, NO repair
          echo "🗄️ Applying migrations to production..."
          flyway -url=jdbc:postgresql://localhost:5432/discbaboons_db -user=app_user -password="$DB_PASSWORD" -locations=filesystem:migrations migrate
          
          # Verify migration success
          echo "✅ Verifying migration status..."
          flyway -url=jdbc:postgresql://localhost:5432/discbaboons_db -user=app_user -password="$DB_PASSWORD" -locations=filesystem:migrations info
          
          # Clean up
          kill $PORTFORWARD_PID
          
          echo "✅ All migrations applied successfully"
        else
          echo "✅ Production is up to date (V$PROD_LATEST)"
          echo "migrations_needed=false" >> $GITHUB_OUTPUT
        fi

    - name: 🔍 Check if Express app changed
      id: changes
      run: |
        # Check if express app files changed
        if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
          # First commit, assume changes
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "✅ First commit - assuming Express app changes"
        else
          EXPRESS_CHANGES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep "^apps/express-server/" | wc -l)
          
          if [ "$EXPRESS_CHANGES" -eq 0 ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "🚫 No Express app changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Express app changes detected:"
            git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep "^apps/express-server/"
          fi
        fi

    - name: 🏷️ Generate semantic version
      if: steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true'
      id: semantic
      working-directory: apps/express-server
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Install dependencies if not cached
        npm ci
        
        # Run semantic-release to get next version and create release
        npx semantic-release --dry-run > semantic-output.txt 2>&1 || true
        
        # Debug: show output
        echo "Semantic-release output:"
        cat semantic-output.txt
        
        # Extract version from output (handle both cases)
        NEXT_VERSION=$(grep -oE "(T|t)he next release version is [0-9]+\.[0-9]+\.[0-9]+" semantic-output.txt | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" || echo "")
        
        if [ -z "$NEXT_VERSION" ]; then
          echo "No version change detected by semantic-release"
          echo "version_changed=false" >> $GITHUB_OUTPUT
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Next version: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT
        fi

    - name: 🏷️ Create actual release
      if: (steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'true'
      working-directory: apps/express-server
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Run semantic-release for real to create the release
        echo "Creating actual release..."
        npx semantic-release

    - name: 🐳 Login to Docker Hub
      if: (steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'true'
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin 2>/dev/null

    - name: 🏗️ Build Docker image
      if: (steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'true'
      working-directory: apps/express-server
      run: |
        VERSION="${{ steps.semantic.outputs.version }}"
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="v${VERSION}-${SHORT_SHA}"
        echo "Building: salokod/discbaboons-express:${IMAGE_TAG}"
        docker build -t salokod/discbaboons-express:${IMAGE_TAG} .
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      id: build
        
    - name: 📤 Push to Docker Hub
      if: (steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'true'
      run: |
        IMAGE_TAG="${{ steps.build.outputs.tag }}"
        echo "Pushing: salokod/discbaboons-express:${IMAGE_TAG}"
        docker push salokod/discbaboons-express:${IMAGE_TAG}
    
    - name: 🔐 Deploy secrets
      if: (steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'true'
      run: |
        echo "🔐 Applying Express sealed secret..."
        kubectl apply -f manifests/prod/express-sealed.yaml
        
        echo "⏳ Waiting for sealed secret to be processed..."
        # Wait for the SealedSecret resource to exist
        kubectl wait --for=condition=Synced sealedsecret/express-secrets --timeout=60s
        
        echo "🔍 Verifying secret creation..."
        # Wait for the actual Secret to be created by the sealed secrets controller
        for i in {1..30}; do
          if kubectl get secret express-secrets >/dev/null 2>&1; then
            echo "✅ Secret express-secrets is now available"
            break
          else
            echo "⏳ Waiting for secret creation... attempt $i/30"
            sleep 2
          fi
        done
        
        # Final verification
        if kubectl get secret express-secrets >/dev/null 2>&1; then
          echo "🔑 Secret keys available:"
          kubectl get secret express-secrets -o jsonpath='{.data}' | jq -r 'keys[]'
        else
          echo "❌ Secret creation failed!"
          kubectl get sealedsecret express-secrets -o yaml
          exit 1
        fi

    - name: 🔧 Deploy Redis infrastructure
      if: (steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'true'
      run: |
        echo "🚀 Deploying Redis infrastructure..."
        
        # Deploy Redis
        kubectl apply -f manifests/prod/redis-deployment.yaml
        kubectl apply -f manifests/prod/redis-service.yaml
        kubectl apply -f manifests/prod/redis-network-policy.yaml
        
        # Wait for Redis to be ready (this is sufficient validation)
        echo "⏳ Waiting for Redis to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/redis-deployment
        
        echo "✅ Redis infrastructure deployed successfully"
        
    - name: 🚀 Deploy to Kubernetes
      if: (steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'true'
      run: |
        IMAGE_TAG="${{ steps.build.outputs.tag }}"
        
        # Validate that we have a proper image tag
        if [ -z "$IMAGE_TAG" ]; then
          echo "❌ ERROR: No image tag available - build may have failed"
          exit 1
        fi
        
        NEW_IMAGE="salokod/discbaboons-express:${IMAGE_TAG}"
        
        echo "🚀 Deploying: ${NEW_IMAGE}"
        
        # STEP 1: Update deployment manifest with new image
        echo "📝 Updating deployment manifest with new image..."
        sed -i "s|image: salokod/discbaboons-express:.*|image: ${NEW_IMAGE}|g" manifests/prod/express-deployment.yaml
        
        # STEP 2: Apply updated manifest (single rollout)
        echo "🚀 Applying updated deployment..."
        kubectl apply -f manifests/prod/express-deployment.yaml
        
        # STEP 3: Wait for rollout
        echo "⏳ Waiting for rollout completion..."
        kubectl rollout status deployment/express-deployment --timeout=300s
        
        # STEP 4: Verify deployment
        echo "✅ Verifying deployment..."
        kubectl get pods -l app=express -o wide
        kubectl exec deployment/express-deployment -- printenv | grep JWT_SECRET > /dev/null && echo "✅ JWT secrets loaded" || echo "❌ JWT secrets missing"

    - name: 📝 Create GitHub Release
      if: (steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'true'
      working-directory: apps/express-server
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Run semantic-release to create actual release
        npm run semantic-release

    - name: 📢 Deployment Success Notification
      if: success() && ((steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'true')
      run: |
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "=========================="
        echo "✅ App: https://discbaboons.spirojohn.com"
        echo "🏷️ Image: salokod/discbaboons-express:${{ steps.build.outputs.tag }}"
        echo "📦 Version: ${{ steps.semantic.outputs.version }}"
        echo "⏰ Time: $(date)"
        echo "👤 Deployed by: ${{ github.actor }}"
        echo "📝 Commit: ${{ github.event.head_commit.message }}" | head -1
        echo "🔗 Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
    - name: 🚨 Deployment Failure Alert
      if: failure()
      run: |
        echo "❌ DEPLOYMENT FAILED!"
        echo "===================="
        echo "🔍 Check logs immediately: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "📧 Alert team for immediate investigation"
        echo "🔄 Consider emergency rollback if needed"

    - name: ℹ️ No deployment needed
      if: (steps.changes.outputs.changed == 'false' && steps.migration_check.outputs.migrations_needed == 'false') || ((steps.changes.outputs.changed == 'true' || steps.migration_check.outputs.migrations_needed == 'true') && steps.semantic.outputs.version_changed == 'false')
      run: |
        echo "🚫 No deployment needed"
        if [ "${{ steps.changes.outputs.changed }}" = "false" ] && [ "${{ steps.migration_check.outputs.migrations_needed }}" = "false" ]; then
          echo "📝 No Express app changes and no migrations needed"
        else
          echo "📝 Express app changed or migrations applied but no semantic version bump warranted"
          echo "💡 Commits don't follow conventional commit format or are non-releasable"
        fi
        echo "🏷️ Current version: ${{ steps.semantic.outputs.version }}"
        echo "✅ Skipping build and deployment"

    - name: 📊 Migration Summary
      if: always()
      run: |
        echo "📊 MIGRATION SUMMARY"
        echo "==================="
        if [ "${{ steps.migration_check.outputs.migrations_needed }}" = "true" ]; then
          echo "✅