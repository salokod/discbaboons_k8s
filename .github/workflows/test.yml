name: Test & Verify

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: discbaboons_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: apps/express-server/package-lock.json
          
      - name: Install dependencies
        working-directory: apps/express-server
        run: npm ci
        
      - name: Generate Prisma client
        working-directory: apps/express-server
        run: npm run db:generate
        
      - name: Run database migrations
        working-directory: apps/express-server
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/discbaboons_test
        run: |
          # Install Flyway CLI
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.8.1/flyway-commandline-10.8.1-linux-x64.tar.gz | tar -xvz
          sudo ln -s $(pwd)/flyway-10.8.1/flyway /usr/local/bin
          
          # Run migrations
          flyway -url=jdbc:postgresql://localhost:5432/discbaboons_test -user=testuser -password=testpassword -locations=filesystem:../../migrations migrate
        
      - name: Run tests
        working-directory: apps/express-server
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/discbaboons_test
          NODE_ENV: test
          FORCE_COLOR: true
        run: npm run verify
  deploy:   
    needs: test  
    if: github.ref == 'refs/heads/main'  # Only on main branch
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    
    - name: 🏷️ Generate image tag
      id: tag
      run: |
        # Create unique tag using git commit SHA
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="v7-${SHORT_SHA}"
        echo "Generated tag: ${IMAGE_TAG}"
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
    
    - name: 🏗️ Build Docker image
      working-directory: apps/express-server
      run: |
        IMAGE_TAG="${{ steps.tag.outputs.tag }}"
        echo "Building: salokod/discbaboons-express:${IMAGE_TAG}"
        docker build -t salokod/discbaboons-express:${IMAGE_TAG} .
        
    - name: 📤 Push to Docker Hub
      run: |
        IMAGE_TAG="${{ steps.tag.outputs.tag }}"
        echo "Pushing: salokod/discbaboons-express:${IMAGE_TAG}"
        docker push salokod/discbaboons-express:${IMAGE_TAG}
    
    - name: ⚙️ Setup kubectl and doctl
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install doctl
        cd /tmp
        wget https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz
        tar xf doctl-1.104.0-linux-amd64.tar.gz
        sudo mv doctl /usr/local/bin
        
        # Authenticate and configure kubectl
        doctl auth init --access-token ${{ secrets.DO_API_TOKEN }}
        doctl kubernetes cluster kubeconfig save discbaboons-production
        
        # Test connection
        kubectl get nodes
        
    - name: 🚀 Deploy to Kubernetes
      run: |
        IMAGE_TAG="${{ steps.tag.outputs.tag }}"
        NEW_IMAGE="salokod/discbaboons-express:${IMAGE_TAG}"
        
        echo "🚀 Deploying new image: ${NEW_IMAGE}"
        echo "📍 Current production image:"
        kubectl get deployment express-deployment -o jsonpath='{.spec.template.spec.containers[0].image}'
        echo ""
        
        # Update the deployment with new image
        kubectl set image deployment/express-deployment express=${NEW_IMAGE}
        
        # Wait for rollout to complete (5 minute timeout)
        echo "⏳ Waiting for deployment to complete..."
        kubectl rollout status deployment/express-deployment --timeout=300s
        
        # Verify deployment success
        echo "✅ Deployment completed! New pods:"
        kubectl get pods -l app=express -o wide
        
        echo "🎯 Verified new image in deployment:"
        kubectl get deployment express-deployment -o jsonpath='{.spec.template.spec.containers[0].image}'
        echo ""
        
        echo "🌐 Your app is live at: https://discbaboons.spirojohn.com"
        
    - name: 📢 Deployment Success Notification
      if: success()
      run: |
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "=========================="
        echo "✅ App: https://discbaboons.spirojohn.com"
        echo "🏷️ Image: salokod/discbaboons-express:${{ steps.tag.outputs.tag }}"
        echo "⏰ Time: $(date)"
        echo "👤 Deployed by: ${{ github.actor }}"
        echo "📝 Commit: ${{ github.event.head_commit.message }}"
        echo "🔗 Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
    - name: 🚨 Deployment Failure Alert
      if: failure()
      run: |
        echo "❌ DEPLOYMENT FAILED!"
        echo "===================="
        echo "🔍 Check logs immediately: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "📧 Alert team for immediate investigation"
        echo "🔄 Consider emergency rollback if needed"